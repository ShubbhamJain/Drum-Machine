{"version":3,"sources":["components/DrumPad.js","components/DrumMachine.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","props","playAudio","bind","handleKeyPress","document","addEventListener","this","window","focus","removeEventListener","e","power","key","toUpperCase","charCodeAt","keyname","audio","pause","currentTime","promise","play","undefined","catch","onDisplay","soundname","volume","className","id","onClick","type","preload","src","ref","React","Component","drums","keycode","DrumMachine","state","display","sliderVol","powerFn","changeVol","setState","target","value","Math","round","drum","map","min","max","step","onChange","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.b6218b24.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass DrumPad extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.playAudio = this.playAudio.bind(this);\r\n\r\n    this.handleKeyPress = this.handleKeyPress.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"keypress\", this.handleKeyPress);\r\n    window.focus();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"keypress\", this.handleKeyPress);\r\n  }\r\n\r\n  handleKeyPress(e) {\r\n    if (this.props.power) {\r\n      if (\r\n        e.key.toUpperCase().charCodeAt() === this.props.keyname.charCodeAt()\r\n      ) {\r\n        this.audio.pause();\r\n        this.audio.currentTime = 0;\r\n        let promise = this.audio.play();\r\n        if (promise !== undefined) promise.catch(function () {});\r\n        this.props.onDisplay(this.props.soundname);\r\n        this.audio.volume = this.props.volume;\r\n      }\r\n    }\r\n  }\r\n\r\n  playAudio(e) {\r\n    if (this.props.power) {\r\n      this.audio.pause();\r\n      this.audio.currentTime = 0;\r\n      let promise = this.audio.play();\r\n      if (promise !== undefined) promise.catch(function () {});\r\n      this.props.onDisplay(this.props.soundname);\r\n      this.audio.volume = this.props.volume;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"drum-pad\" id={this.props.id} onClick={this.playAudio}>\r\n        <h2>{this.props.keyname}</h2>\r\n        <audio\r\n          className=\"clip\"\r\n          type=\"audio/mp3\"\r\n          preload=\"none\"\r\n          id={this.props.keyname}\r\n          src={this.props.src}\r\n          ref={(ref) => (this.audio = ref)}\r\n        ></audio>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DrumPad;\r\n","import React from \"react\";\r\nimport DrumPad from \"./DrumPad\";\r\n\r\nconst drums = [\r\n  {\r\n    id: 1,\r\n    keycode: 81,\r\n    soundname: \"Heater 1\",\r\n    keyname: \"Q\",\r\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\",\r\n  },\r\n  {\r\n    id: 2,\r\n    keycode: 87,\r\n    soundname: \"Heater 2\",\r\n    keyname: \"W\",\r\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\",\r\n  },\r\n  {\r\n    id: 3,\r\n    keycode: 69,\r\n    soundname: \"Heater 3\",\r\n    keyname: \"E\",\r\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\",\r\n  },\r\n  {\r\n    id: 4,\r\n    keycode: 65,\r\n    soundname: \"Heater 4\",\r\n    keyname: \"A\",\r\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\",\r\n  },\r\n  {\r\n    id: 5,\r\n    keycode: 83,\r\n    soundname: \"Clap\",\r\n    keyname: \"S\",\r\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\",\r\n  },\r\n  {\r\n    id: 6,\r\n    keycode: 68,\r\n    soundname: \"Open HH\",\r\n    keyname: \"D\",\r\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\",\r\n  },\r\n  {\r\n    id: 7,\r\n    keycode: 90,\r\n    soundname: \"Kick n Hat\",\r\n    keyname: \"Z\",\r\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\",\r\n  },\r\n  {\r\n    id: 8,\r\n    keycode: 88,\r\n    soundname: \"Kick\",\r\n    keyname: \"X\",\r\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\",\r\n  },\r\n  {\r\n    id: 9,\r\n    keycode: 67,\r\n    soundname: \"Closed HH\",\r\n    keyname: \"C\",\r\n    src: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\",\r\n  },\r\n];\r\n\r\nclass DrumMachine extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      display: \"Let's play drums\",\r\n      sliderVol: 0.25,\r\n      power: true,\r\n    };\r\n\r\n    this.onDisplay = this.onDisplay.bind(this);\r\n\r\n    this.powerFn = this.powerFn.bind(this);\r\n\r\n    this.changeVol = this.changeVol.bind(this);\r\n  }\r\n\r\n  onDisplay(display) {\r\n    this.setState({\r\n      display,\r\n    });\r\n  }\r\n\r\n  powerFn() {\r\n    this.setState({\r\n      power: !this.state.power,\r\n      display: \"\",\r\n    });\r\n    if (this.state.power === false) {\r\n      this.setState({ display: \"Power ON\" });\r\n    } else {\r\n      this.setState({ display: \"Power OFF\" });\r\n    }\r\n  }\r\n\r\n  changeVol(e) {\r\n    if (this.state.power) {\r\n      this.setState({\r\n        sliderVol: e.target.value,\r\n        display: \"Volume : \" + Math.round(e.target.value * 100),\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const drum = drums.map((drum) => {\r\n      return (\r\n        <DrumPad\r\n          id={drum.id}\r\n          keyname={drum.keyname}\r\n          src={drum.src}\r\n          key={drum.id}\r\n          keycode={drum.keycode}\r\n          soundname={drum.soundname}\r\n          onDisplay={this.onDisplay}\r\n          power={this.state.power}\r\n          volume={this.state.sliderVol}\r\n        />\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div id=\"drum-machine\">\r\n        <h1>Drum Machine</h1>\r\n\r\n        <span id=\"display\">{this.state.display}</span>\r\n\r\n        <div id=\"controls\">\r\n          <div onClick={this.powerFn} className=\"powerArea\">\r\n            <div className=\"control\">Power</div>\r\n          </div>\r\n\r\n          <div className=\"slider\">\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"1\"\r\n              id=\"volSlider\"\r\n              className=\"vol\"\r\n              step=\"0.01\"\r\n              value={this.state.sliderVol}\r\n              onChange={this.changeVol}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div id=\"drum-pad\">{drum}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DrumMachine;\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport DrumMachine from \"./components/DrumMachine\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <DrumMachine />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}